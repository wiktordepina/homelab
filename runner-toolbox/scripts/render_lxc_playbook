#!/usr/bin/env python3
"""
This script generates an Ansible playbook for configuring and managing LXC containers.

Usage:
  ./render_lxc_playbook <vmid>

Arguments:
  vmid: The VM ID of the LXC container.

The script performs the following steps:
1. Reads the LXC configuration from a YAML file located at './config/lxc/<vmid>.yaml'.
2. Extracts the IP address, PVE extra configuration options, Ansible roles, and Ansible tasks from the configuration file.
3. Constructs an Ansible playbook for applying PVE extra configuration options if they are present.
4. Constructs an Ansible playbook for the LXC container using the extracted roles and tasks.
5. Combines the PVE extra configuration playbook and the LXC container playbook if PVE extra configuration options are present.
6. Outputs the final playbook to stdout in YAML format.

Dependencies:
  - ruamel.yaml: A YAML parser/emitter that supports round-trip preservation of comments, etc.

Example:
  ./render_lxc_playbook 204
"""


import sys
import ruamel.yaml as yaml

vmid = sys.argv[1]

lcx_conf_path = f'./config/lxc/{vmid}.yaml'
with open(lcx_conf_path) as conf_file:
  lxc_conf = yaml.YAML().load(conf_file)

lxc_ip = lxc_conf['terraform']['ip_address'].split('/')[0]
pve_extra = lxc_conf.get('pve_extra', None)
ansible_roles = lxc_conf['ansible'].get('roles')
ansible_tasks = lxc_conf['ansible'].get('tasks')

pve_options_playbook = {}
if pve_extra:
  pve_options_playbook = {
    'name': f'PVE Extra Config Options for LXC {vmid}',
    'hosts': '192.168.200.100',
    'tasks': [
      {
        'name': 'Apply extra config',
        'ansible.builtin.lineinfile': {
          'path': f'/etc/pve/lxc/{vmid}.conf',
          'create': 'yes',
          'line': yaml.scalarstring.DoubleQuotedScalarString('{{ item }}')
        },
        'loop': [ f'{key}: {value}' for line in pve_extra for key, value in line.items() ],
        'register': 'pve_config'
      },
      {
        'name': f'Restart LXC {vmid}',
        'ansible.builtin.command': f'pct reboot {vmid}',
        'when': 'pve_config is changed',
        'register': 'reboot'
      },
      {
        'name': f'Wait until LXC {vmid} is back up',
        'ansible.builtin.wait_for': {
          'host': lxc_ip,
          'port': 22,
          'delay': 10
        },
        'when': 'reboot is changed'
      }
    ]
  }

playbook = {
  'name': f'LXC {vmid}',
  'hosts': lxc_ip
}

if ansible_roles:
  playbook.update({'roles': ansible_roles})

if ansible_tasks:
  playbook.update({'tasks': ansible_tasks})

full_playbook = [pve_options_playbook, playbook] if pve_extra else [playbook]

yaml.YAML().dump(full_playbook, sys.stdout)
